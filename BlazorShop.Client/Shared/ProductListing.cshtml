@using BlazorShop.Shared.Models
@using BlazorShop.Shared.Models.Search
@using BlazorShop.Client.Services;
@inject IDataService DataService

<div class="productListingContainer">
    @if (SearchResult == null || !SearchResult.ResultItems.Any())
    {
        <div class="productCard">
            <div class="lds-dual-ring searchInputItem"></div>
        </div>
    }
    else
    {
        <div class="productCard">
            <h3>@GetDisplayValue(ProductCategory)</h3>
        </div>

        @foreach (var item in SearchResult.ResultItems)
        {
            <div class="productCard">
                <a href="/bla">
                    <div>@item.Title</div>
                    <div>@item.HtmlDescription</div>
                </a>
            </div>
        }
    }
</div>

@functions {
[Parameter]
private Category ProductCategory { get; set; } = Category.None;
[Parameter]
private SearchResult SearchResult { get; set; }
[Parameter]
private int ItemsPerPage { get; set; } = 10;

protected async override Task OnInitAsync()
{
    var searchRequest = new SearchRequest
    {
        PageSize = ItemsPerPage,
        Category = ProductCategory

    };
    SearchResult = await DataService.SearchProducts(searchRequest);
}

private string GetDisplayValue(Category ProductCategory)
{
    Category result = (Category)ProductCategory;
    return result.ToString();
}

}
